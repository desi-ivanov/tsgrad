(function () {
    'use strict';

    // inspired by https://github.com/karpathy/micrograd/blob/master/micrograd/engine.py
    class Parameter {
        constructor(value, children = [], gradfn = () => { }) {
            this.value = value;
            this.children = children;
            this.gradfn = gradfn;
            this.add = (other) => {
                const otherPar = other instanceof Parameter ? other : new Parameter(other);
                const out = new Parameter(this.value + otherPar.value, [this, otherPar], () => {
                    this.grad += out.grad;
                    otherPar.grad += out.grad;
                });
                return out;
            };
            this.sub = (other) => this.add((other instanceof Parameter ? other : new Parameter(other)).neg());
            this.neg = () => this.mul(-1);
            this.mul = (other) => {
                const otherPar = other instanceof Parameter ? other : new Parameter(other);
                const out = new Parameter(this.value * otherPar.value, [this, otherPar], () => {
                    this.grad += otherPar.value * out.grad;
                    otherPar.grad += this.value * out.grad;
                });
                return out;
            };
            this.pow = (exp) => {
                const out = new Parameter(this.value ** exp, [this], () => {
                    this.grad += exp * this.value ** (exp - 1) * out.grad;
                });
                return out;
            };
            this.div = (other) => {
                const otherPar = other instanceof Parameter ? other : new Parameter(other);
                return this.mul(otherPar.pow(-1));
            };
            this.exp = () => {
                const out = new Parameter(Math.exp(this.value), [this], () => {
                    this.grad += out.value * out.grad;
                });
                return out;
            };
            this.log = () => {
                const out = new Parameter(Math.log(this.value), [this], () => {
                    this.grad += 1 / this.value * out.grad;
                });
                return out;
            };
            this.relu = () => {
                const out = new Parameter(Math.max(0, this.value), [this], () => {
                    this.grad += out.grad * (out.value > 0 ? 1 : 0);
                });
                return out;
            };
            this.sigmoid = () => {
                const out = new Parameter(1 / (1 + Math.exp(-this.value)), [this], () => {
                    this.grad += out.grad * (out.value * (1 - out.value));
                });
                return out;
            };
            this.tanh = () => {
                const out = new Parameter(Math.tanh(this.value), [this], () => {
                    this.grad += out.grad * (1 - out.value ** 2);
                });
                return out;
            };
            this.getValue = () => this.value;
            this.setValue = (value) => { this.value = value; };
            this.getGrad = () => this.grad;
            this.backward = () => {
                const topo = [];
                const visited = new Set();
                function buildTopo(v) {
                    if (!visited.has(v)) {
                        visited.add(v);
                        v.children.forEach(c => buildTopo(c));
                        topo.push(v);
                    }
                }
                buildTopo(this);
                topo.reverse();
                this.grad = 1;
                for (const param of topo) {
                    param.gradfn();
                }
            };
            this.toString = () => `v=${this.value.toFixed(3)} g=${this.grad.toFixed(3)}`;
            this.grad = 0;
        }
        zero_grad() { this.grad = 0; }
    }

    class Model {
        constructor() {
            this.zero_grad = () => {
                this.parameters().forEach(param => param.zero_grad());
            };
            this.parameters = () => {
                return Object
                    .values(this)
                    .filter(p => p instanceof Parameter || p instanceof Model)
                    .flatMap(p => p instanceof Parameter ? [p] : p.parameters());
            };
            this.loadFromValues = (values) => {
                this.parameters().forEach((p, i) => p.setValue(values[i]));
            };
        }
        forward(xs) {
            return xs;
        }
    }

    class ReLU extends Model {
        forward(xs) {
            return xs.map(x => Array.isArray(x) ? this.forward(x) : x.relu());
        }
    }
    class Softmax extends Model {
        forward(xs) {
            if (xs.length === 0)
                return [];
            if (Array.isArray(xs[0])) {
                return xs.map(softmax);
            }
            return softmax(xs);
        }
    }
    const softmax = (xs) => {
        const s = xs.map(x => x.exp());
        const sum = s.reduce((a, v) => a.add(v));
        return s.map(x => x.div(sum));
    };

    class Conv1d extends Model {
        constructor(kernel_size, stride, padding, initializer = () => Math.random() * 2 - 1) {
            super();
            this.kernel_size = kernel_size;
            this.stride = stride;
            this.padding = padding;
            this.initializer = initializer;
            this.parameters = () => this.w.flat();
            this.forward = (xs) => {
                const outputSize = Math.floor((xs[0].length - this.w[0].length + 2 * this.padding) / this.stride) + 1;
                const output = Array.from({ length: outputSize }, () => Array.from({ length: outputSize }, () => new Parameter(0)));
                for (let i = -this.padding, oi = 0; i < xs.length + this.padding - this.w.length + 1; i += this.stride, oi += 1) {
                    for (let j = -this.padding, oj = 0; j < xs[0].length + this.padding - this.w.length + 1; j += this.stride, oj += 1) {
                        for (let k = 0; k < this.w.length; k++) {
                            for (let l = 0; l < this.w[0].length; l++) {
                                if (0 <= i + k && i + k < xs.length && 0 <= j + l && j + l < xs[0].length) {
                                    output[oi][oj] = output[oi][oj].add(xs[i + k][j + l].mul(this.w[k][l]));
                                }
                            }
                        }
                    }
                }
                return output;
            };
            this.w = Array.from({ length: kernel_size }, () => Array.from({ length: kernel_size }, () => new Parameter(initializer())));
        }
    }
    class Conv2d extends Model {
        constructor(out_channels, kernel_size, stride, padding, initializer = () => Math.random() * 2 - 1) {
            super();
            this.out_channels = out_channels;
            this.kernel_size = kernel_size;
            this.stride = stride;
            this.padding = padding;
            this.initializer = initializer;
            this.parameters = () => this.convs.flatMap(conv => conv.parameters());
            this.forward = (xs) => {
                const res = this.convs.map(conv => xs.map(x => conv.forward(x)).reduce((a, b) => a.map((row, i) => row.map((_, j) => a[i][j].add(b[i][j])))));
                if (res.length !== this.out_channels)
                    throw new Error(`Invalid output channels`);
                return res;
            };
            this.convs = Array.from({ length: out_channels }, () => new Conv1d(kernel_size, stride, padding, initializer));
        }
    }

    class Flatten extends Model {
        constructor() {
            super(...arguments);
            this.forward = (xs) => xs.flat(5);
        }
    }

    const reduceSum = (xs) => xs.reduce((a, v) => a.add(v));

    class Perceptron extends Model {
        constructor(input_size, use_bias = true, initializer = () => Math.random() * 2 - 1) {
            super();
            this.parameters = () => this.w.concat(this.use_bias ? [this.b] : []);
            this.forward = (x) => {
                if (x.length != this.w.length)
                    throw new Error(`Input missmatch Expected ${this.w.length} channels, but got ${x.length}`);
                const r = reduceSum(x.map((v, i) => v.mul(this.w[i])));
                return this.use_bias ? [r.add(this.b)] : [r];
            };
            this.w = Array.from({ length: input_size }, () => new Parameter(initializer()));
            this.b = new Parameter(initializer());
            this.use_bias = use_bias;
        }
    }
    class Linear extends Model {
        constructor(in_channels, out_channels, use_bias = true, initializer = () => Math.random() * 2 - 1) {
            super();
            this.parameters = () => this.w.flatMap(p => p.parameters());
            this.forward = (x) => {
                if (x.length != this.in_channels)
                    throw new Error(`Input missmatch Expected ${this.in_channels} channels, but got ${x.length}`);
                const y = this.w.map(p => p.forward(x)[0]);
                if (y.length != this.w.length)
                    throw new Error(`Output missmatch. Expected ${this.w.length} outputs, but got ${y.length}`);
                return y;
            };
            this.in_channels = in_channels;
            this.w = Array.from({ length: out_channels }, () => new Perceptron(in_channels, use_bias, initializer));
        }
    }

    class Sequential extends Model {
        constructor(...layers) {
            super();
            this.parameters = () => this.layers.flatMap(l => l.parameters());
            this.forward = (xs) => this.layers.reduce((a, l) => l.forward(a), xs);
            this.layers = layers;
        }
    }

    // export const savedModelParams = [-0.16833165325215496,0.5561538064013241,0.2737854913708997,0.0615198808622141,-0.16900302128111244,0.6908446497003483,-0.03851886025811144,0.04783350612500522,0.15313503714558285,0.2940931933848705,-0.13741094921253635,0.21705779565262914,0.4126217453238908,0.08272060321232919,0.06058289087688052,0.2270174932630491,0.08923597363350032,0.038325418143396205,-0.1829436399115083,-1.1051347551015729,0.47950041842482555,0.2701121050145754,-0.8789197916989073,0.10756045171934328,0.36765246792452194,0.5154314704639438,-2.4812218857520585,0.8311722165747405,-0.15709614890282778,-0.6452144318721739,-0.06112157034074402,0.9507483889105325,0.2834966224552199,0.034687508225355754,-0.3834511181109221,-0.10068670265286733,0.211253629630473,0.0379211631176595,0.2874415937443777,0.3958120457252484,0.5669599052423637,0.8609258792990697,0.9133399456143074,0.5808683396919051,0.39296546767516344,0.20049145114278982,0.35706737008922285,0.42193522414148443,-0.14703142829955915,-0.9238195769199181,0.18083577287140853,-3.0727426565084137,0.4272318932271357,0.2051759721395223,-1.2287150391665163,0.29823382394747955,-1.559047214021963,1.025634694221277,0.4595988242105882,0.6927121237709462,-28.121070037283143,-4.003787586773895,-0.2848795533112128,-4.059574715961078,-2.888613837271923,-5.264105412931792,1.3035511825397468,-2.0745112915957304,2.8065628276673427,-7.1341067236667435,-1.2330591972433531,0.7003471643489858,0.9741721607040297,-4.902996334062544,0.8111588853224959,-0.24972740744191882,0.03614782160435822,-12.934913815614593,0.32474841192209997,-2.3860095150599108,1.3273265447782678,-0.24142593844038351,0.5902783259295811,0.3603146153006253,-1.765403199752041,-2.2859064209506537,1.0092997992852721,-3.452827494053766,1.0429761116894363,0.33536579099574065,2.5737706338340574,-0.41076603520192817,0.18173531769435133,-1.3068587895602484,-9.96390480709427,-5.008581730553151,-4.417017339433912,-3.033958535994055,2.098316216131912,0.5790515674373188,-0.9232522133207005,-1.0411753391926137,-1.5450758857202456,-3.635475740149299,-3.056914512857573,0.07423014911376362,0.7144741960294365,2.2188519528855193,-2.5523486397165493,-0.16131543863322143,0.8524578360978483,0.016005908073218122,-1.8550717742000102,1.134959986930942,-2.381162799420524,0.8905432770246711,-0.9462080771246685,-1.1755880352470804,-0.982602742028892,2.147792295973834,0.6462961470740921,1.100214894753029,0.4341161538594833,-0.7640132772129223,-4.7998469636690935,-2.54931244004527,-0.3848886211106119,0.04505772634148938,-2.7406210206689914,1.306152306685068,-0.7667223518349897,0.9604183638636775,-1.5326099567600082,1.9887753929376903,-1.919925871860269,1.2697290644089425,1.0438709027147814,-1.3439321448121908,0.22011662107814767,-3.057047317448933,-1.726480172747212,-0.4171466459114652,-1.5920020919490403,0.3463946493686121,0.18752334664689174,1.56094181941111,-0.9593986850542211,0.3515048244789258,-0.22899664436867667,3.254325721068535,-2.4155364575940887,1.5908389119554665,0.5203343332477085,4.669432578167987,-1.4133778830949704,1.3092229755322422,-0.12741872207803123,-3.5245316521840167,-2.7619633298172466,-0.9599397480916626,-0.39857755361797137,0.8673611585501961,-26.159177686990454,-5.986146299286394,-2.3647187708987496,-3.636479136597178,-2.276739029058617,-0.6282572336759567,-4.199401923572759,-3.582688053928491,-2.8204273443162906,-0.5000868817890266,-2.3765345092677403,0.031685015368742915,0.36228203612734516,-4.664383073858481,1.5256451317564461,0.35246316576914233,0.2825671685236274,1.8408445943171778,1.0115017930475252,0.7906505392143474,1.4756023588718372,0.8718153421768986,1.0748230637397647,-0.5708706931264065,0.6288239790982021,-1.2308779431832726,-0.276808308905523,-2.427501914239578,-0.8286781845780099,1.2499427591483057,-0.49725234795382633,-0.6793619832401079,0.1776382653759765,-1.116929617323106,-5.258618856788029,-1.1167923928525452,-0.33472945127431253,1.399742398243244,-0.24349717729735984,-1.9677856778796345,-3.5997114807859054,-0.20479934915598447,-6.544352725643844,3.4335089041295963,-1.9717739389988482,0.9233951153278962,-1.4114883071640563,-4.761675890240232,-2.301400187145512,0.653353480089295,-0.5913695100178314,3.1105824291447752,2.9886991974644705,-0.162925311607531,2.29484873684672,-0.19769783195642615]
    const savedModelParams = [0.25636602558189575, 0.43472505358003705, 0.5874642037484267, -0.7525198026480497, -0.13025009555189576, -0.10548588340468491, -0.9847813945628444, -0.6055723497545981, -0.4431263466826594, 0.08009388130406181, 0.11826151228100942, 0.18681643061722847, 0.087746474975148, 0.3568430562737504, 0.578746477836759, -0.8804254661846658, -0.4293881612080681, -0.5214365044657938, 0.389108049023545, 0.3491777079795083, 0.9981570964032658, -1.220692919676909, -0.8712467339689185, -0.6398828100025254, -0.25342901489675024, 0.07962228399920032, -0.21038858945808173, 0.0032869822258839083, 0.17749992619349508, 0.17278011146299516, 0.22015620638412717, 0.3776955266544893, 0.4487115335730172, -0.9892151159365324, -0.6040238692264709, -0.5998746592467995, 0.16913476365985236, 0.29790923907880557, 0.22390396462478246, 0.30325293152794, 0.39592252168191977, 0.1950088390978268, 0.0036494445509699016, 0.043232095108304815, 0.0073398392935598075, -0.02142359797833521, -0.04143225044433053, -0.9423232115501626, 0.15769431533948952, 0.19448905490858698, 0.023681225591574775, 0.357736833826959, 0.44783994195877025, 0.07874788027912191, -1.400642676293001, -0.9102112061757924, 0.05160192924908445, -0.10798706109417447, 0.2167188224806937, 0.30139595458584534, 0.145604472171642, 0.31051442067739843, 0.28785238951621833, 0.0743290660829935, 0.23722877132537895, 0.19327716022302532, 0.09665063238937519, 0.42386181470907347, 0.15022152706755393, 0.04836438332703778, 0.17040088027832667, 0.026696266673582526, 0.43515855912154666, -1.450989605230047, -0.49209117794983653, 0.654772416347375, 0.5497212150578279, -3.48452726415927, -0.19369798399627727, -1.278964332838941, -0.48006895150627443, 0.31985267616240937, 0.7361787462593606, -1.7204296210940242, -0.7033677346408018, -0.9153430536569939, -1.0091398547066952, 0.8114532582016769, 0.8317356942605356, -1.7033113805230693, -0.371615717752155, -1.8677696474732377, -1.1909748449416206, -0.5078432107642897, -1.3576723380251867, 1.365427148149715, 0.7682604668353887, 0.22509963452891024, -1.4041653784510801, -1.3834435668770884, 0.35970207007421484, 0.8508973207068936, 0.16179255267500528, 0.2992541504187281, 0.3866904931254809, 0.22515227141751992, 0.2967257661358228, -0.01510136153055188, -0.3299101699290775, -1.0439516781147846, -0.68966353073969, 0.09421901946737411, 0.15398184718342392, -2.242189459813591, -1.090317941916333, -0.3342764434482914, -0.7723966974961102, 0.6244152781387541, 0.707770426625025, -1.1552415944835748, -0.49234844663361893, -1.2129264183841482, -1.2623110929096668, 0.48303560962903785, 1.2686214306157622, -0.08804087329642148, -0.567888335125413, -0.09205231415757195, -2.1856910573881203, -3.133008518553583, -1.2200024737560078, 1.1841952408970204, -0.376110449292307, 0.40991584478399934, 0.34976141469885996, 0.08599559665562582, -0.000542796665629995, 0.31255114160758946, -1.5677892934711735, 0.28695549107999413, 0.4462141028573786, 0.3536264303919355, 0.10889847932250088, -1.982651544460393, -0.4314932235711483, -0.698591767599586, -0.36624551345869644, 0.1509687177648149, -1.067137146775594, -3.2787945703968577, -0.7058235876806033, -1.2529506393420744, -0.30499748539013893, 0.5067761224935514, 0.04777046708345755, -2.5995015803038304, 0.25517715007056313, -2.065767945184998, 0.025984514432274758, 0.03053578655553822, -2.3469666136994936, -1.5106405895644277, 0.515187063217468, -1.9758905050686553, -1.2196494384950407, -5.623157263709406, -0.4443973447550391, 1.4291395779064788, 0.46852968254933447, 0.02908808371690828, -0.23423173714616874, 0.0047496269296043, 0.3547883704660573, 0.38654409598836065, -0.6100781067680943, -0.3692943981951787, -0.18285892849142438, 0.8723708274067922, 1.225155734609878, -0.024721351394748646, -0.7987559240236426, 0.4912111292630619, -0.2095256256800735, 0.5618614459986382, -0.43395756673555774, -2.815593750078625, -0.6445002441293156, -0.9471258368036066, -0.46593482970377564, 0.09002710144627672, 0.5439199233135574, -2.0862988941585643, -0.044566861783990955, -1.4624810365854526, -0.29759800349550003, 1.429281954936664, 0.7164689196665551, -1.2572229945772964, 0.056739727462861704, -1.5671440931766434, -0.9632147188399215, -1.1808433585172768, -0.35804225344687757, 1.6519576835926377, 0.3072323826055969, 0.20034062913004713, -1.4793336649731437, -0.6228393018555275, 0.5875220387559149, 0.9600999079404604, 0.2418256933010529, 0.14983619697025574, 0.5140288282554307, 0.3658524041221275, 0.6951149600735967, -0.39257513721534765, -0.42166724917531934, 0.26793205476497933, -1.2655023081854533, 0.3306667267453567, 0.7752502087301039, -0.4858056743998947, 0.10054461981027625, 0.26876140449562996, -0.4123694090332879, 0.1069866837082867, -2.729659863467269, -2.34224868455531, 0.8630469945079589, -1.1312475116361274, -0.6661993759270289, -0.1603317136547649, -4.285850190444993, -1.1691104835781982, -1.848522356826679, -1.3344912201626156, -1.7275629455741657, -1.6417910921065497, -2.2280401878584164, -1.0879473295925155, -3.517335125891233, -2.4994188433514664, -3.9000274553676375, -1.1346569805572668, -0.04773516667889099, -3.949792479342869, 0.23264893895342753, -0.19534923755607084, -0.1071562823252212, -0.017677825667685325, -0.16266239816216177, 0.3824856936112109, 0.04117220456866385, 0.09191895561718585, -0.5936384167998875, -0.2572419462195485, -0.9920790102734659, -3.7343817110545086, -1.5316477027257223, -0.035431864081626484, -0.3753345310275092, 0.13578646745814546, -2.8030869339265228, -2.0841306975428853, 0.49550464534166605, 0.036787980157631614, -1.27433954731264, -0.4909554572730668, -1.9232893328253435, -1.22116651063392, -2.8637855083574424, -1.1960413876030682, -2.229918140677007, -2.448278150310143, -1.3891018039225023, -3.7744364377002655, -1.7339093529982674, -1.0931622562480583, -0.7437223095477439, -1.03279116731809, -0.2648263618116818, -0.41323929156015704, 1.4044144553602873, 1.062833978001297, -0.6871075772805341, -0.9902703680256709, 0.2747224189724412, 0.3791779301926307, 0.23702282585729453, -0.08500270002508692, -1.2793392521771918, -0.12659476042100287, -2.8820971740093917, -3.5177928231814715, -1.8391515427435337, -0.0025517753704984037, -1.151056297387738, -0.35597311203562093, -6.253229478332477, 0.5786483944003447, -0.6744784369948156, 0.010329644798436295, -1.5188312895234715, -0.20915167896242345, -1.859339545737288, -0.43193339651323787, -2.8722163571840924, -1.0342180230882387, -1.5710244021349726, -1.5427953139207433, -1.2373896277663428, -6.467152970490003, -2.757226773177829, -1.6970909336557334, -2.1546902999326734, 0.39304005045544094, -1.1749298564694877, -0.7842154451057469, 0.6174365510451193, -0.13957544780648903, -0.34859289407408145, -0.19305608530984614, -0.5261420643317348, -0.20346786304288353, -0.18115674949598723, 0.5798557710540096, -1.5220980364814929, 0.6002459120016068, -1.1697390968137353, -1.9272977100561437, -0.7199100288015196, -0.7279286677351168, -0.5761546675389816, -0.36066428947944856, -4.350202516997415, -1.7226377466566964, 0.040757867083381194, -0.015314075795581092, -0.3024618859887438, -0.3022134840014743, -4.574945692198823, -1.3421315514901961, -1.4798208954792509, -1.7489099071121088, -1.8281942939863938, -1.111080618129278, -1.7682065825888704, -1.865624927483266, -1.487929666217565, -0.8195539697351489, -2.5217761287831015, -0.7352107267820487, -0.8593389083354955, -1.9606685461284907, 0.9854727331255188, 0.15694127793173795, -0.4435353504036328, 0.04910819076513683, 0.05006946432886601, 0.551754742101408, -0.222061471044612, 6.436456616861696, -1.2626229777752038, 0.14736174913631792, 1.5377772313264686, 1.6966896060364176, 0.042820838754896076, -2.4744090650026496, 0.06814737782454536, 0.26245136492779664, 0.9497150290911515, 0.5713452599311584, 0.5828094623509915, -3.114169296535172, -0.24904548227753692, 0.7182125570561227, 0.32000352780224817, 0.2913544479343747, -1.2802170622507911, -1.4235035018719424, -1.9570141400457366, -1.277387533805547, -1.1249607491395934, -1.0288763583552722, -1.2726767875487506, 1.200985939713325, 0.7659056917133892, -0.3126087790621315, -0.06604731722288616, 0.2715011052281072, 0.3157998964250943, 1.0196926044549544, 0.34466003932144396, 0.5487613185624405, 0.08163641249461562, -0.07253986007409645, 0.718441447193341, 0.8438576348127376, 0.2772779762886623, 1.2661233081766028, 1.2949046666979944, 0.5577833630209686, 0.3199955666929171, -2.4814313279910034, -0.5486370068429436, 0.8231694572946936, 0.8041209083474047, 0.751382316491644, -0.06927233821535496, -2.0926518566814423, -0.09128860726970264, 0.1644635242381804, -0.48525215989013465, -0.7153392177040836, -0.9914618345709938, -0.3190693186028867, -2.355878183318498, -1.2954906556328427, -0.0812928024339931, -0.39416560822954155, -0.9284188458453245, 0.7571740692221874, 0.6957709416728604, -0.17869831237571443, 0.01084413245561165, 0.5789906714315957, 0.6144728866659924, 1.2160810984447934, 0.5273263646303201, -0.4424762467324922, -0.557393388987407, -0.4038779329173312, 0.8681540165405859, 0.4470784554112213, -0.8099471881373833, 0.6703230004662429, 0.6171546891675159, 0.1863167211684903, -0.16090294106365113, -3.0382978711841018, -0.23076352982578066, 0.8222617902022259, 0.4400821303943997, 0.062088444487917276, -1.8864909969147794, -2.184602046928995, 0.44640957367840783, 0.24607297660337885, -0.34272836622346003, -1.784205149905706, -0.49597292087206807, 0.35584139531789194, -2.219927334440341, -0.35503067176979136, -0.03915442085239673, -0.002064857895448306, 0.7493798232616949, 1.9115664455563826, 0.43905131011772003, 0.3404673271590583, -0.1103538548875056, 0.2455868944473926, 0.04413674091021296, 0.9900310405249565, -0.05850350542553824, 0.36717033637419244, -0.7569804756336771, -0.23094657065493307, -0.2756262693807971, 0.6891888373619417, -0.5549100545568099, 0.5725480272422123, 1.036357011808397, 1.3426325054308554, -0.2846643657329577, -2.582416967339915, -0.04642823623534196, 0.9655288731474218, 0.5349717593753578, 0.39092118396509346, -0.33069915746878314, -3.2615995783891654, 0.012462506632003004, 0.7712301959260244, 0.5355114109016118, 0.5575453555018863, -1.6414156212464905, -0.45397203567901523, -1.9252323638370332, -1.5360487860102754, -0.32862148337179325, -0.9817690052483438, -0.7688167554388794, 1.5968110121582124, 0.6637907386627061, -0.19814053210076268, -0.06791077771775075, 0.5598205807226004, 0.4787584038620061, 1.31478202691648, 0.5211939883771657, 0.08016244457178667, 0.19901648343112288, 0.2551286839458796, 0.8811782025399199, 1.175858268078344, -1.7593059405041063, -0.26104889222585387, 1.3822035944084183, 0.8327305174169674, 0.44632776464328383, -1.2551369603062439, -1.8612631748491126, 0.5103688062924385, 0.6857754047414001, 1.242989878852709, 0.2659618721811942, -0.2116580945651699, -3.2538890535669225, 0.8099379412579957, 0.9459145538152235, 0.43684644386898686, -0.13963835993512458, -0.46029479687051245, -0.30008206349450245, -1.1309305569644612, -0.6411486505484728, 0.3516668424959411, 0.8134514944663802, -0.3889727521849486, -3.3736914417309554, 0.9476022930342372, -0.4779146193963431, 0.31389287725348186, 0.19027080864967125, -1.0143966349196758, -2.0469716609055415, 0.37276598640246056, 0.29994647345607806, 0.1602172446194848, -0.04177147710951184, -0.32028266066154526, -1.172951777941628, 0.4820249506208733, 0.03312675949962096, 1.1602309929020638, 0.6574880404714701, -0.601905043070901, -1.5845007482608597, 0.06241516225817926, 0.6279905435452847, 1.3144451540288633, 0.588578746694937, -0.717255316815796, -1.155353102808319, 0.7298960745309762, -0.12380173342389711, 0.3737129235029643, 0.9532934897154037, 0.185086886614319, -1.3807716316389549, -0.3999881035644601, -0.29186336736464, 0.5725977144963408, 0.7187949875384142, 0.26198274246783715, -2.699368770257987, 1.3023237286444675, 0.08019734118359573, -0.37182056249911904, 0.13586208508324196, -0.052501531332057046, -0.5802364254458676, 1.873004564567065, 0.19441700113189542, 0.23511700887591874, 0.3249548573252976, -0.15445310303399093, -2.582364820362421, 0.49402826440936776, 0.44143612432129226, 0.8906860696038361, -0.26049706780687226, -1.0902268606622147, -3.18209631862151, 0.1204025297748042, 1.124990674309706, 0.8180752576640385, 0.0004621158453918311, -1.8627823319792343, -2.1449523663877974, 0.29272487200118275, 0.03439205430445885, 0.5631357667485284, 0.9585133027447182, -0.2875675149079105, -2.648829868123143, -0.8978535415181318, 0.6527864464209783, 0.5189028764773823, 0.6568655300639897, -1.602253708248282, -4.542525252310516, 0.5688077017378711, 0.13898677982200844, -0.16021780269668814, -0.5693764586812953, -1.4714511370671102, -2.056575063097716, 0.07570407019918317, 0.4118125350842485, 0.11411684617816596, 0.295406927014301, -0.32802049540024725, -2.481684229658785, 0.6901014794762679, 0.32118980172589134, 1.8443857370422816, 0.6457569877608831, -0.9416724657581391, -2.931549194708602, 0.4879812991892628, 1.0338329111063085, 0.6982620178279161, 0.17682828596107447, -1.127861365037812, -2.691125044756784, 0.8555089289784346, 0.7986876313205414, 0.42784371129258203, 0.3967785277131925, -0.14895852268878693, -1.00535511836274, -1.3176968647510163, -0.12905980692593888, 0.878763366260514, 0.7975783533558112, -0.15954245068425088, -4.110609093741928, 0.9091194986360065, -0.3143342750513277, -0.2724625744915679, 0.2581122854767788, -0.8801187821351781, -2.3137788898694223, 0.6945218465997328, -0.14419695208010114, 0.25827797068320135, 0.10605233851901107, -0.18683983676297766, -1.6146615126084318, -3.504080020519186, -0.8263620691727462, -0.9251964390165153, -2.4858245738379345, -3.8192999408768498, -1.5337350115668558, 1.283943628921163, 0.057178975098956794, 0.14842328076931213, -2.355067508431521, -2.0301791324199963, -2.0255246499501007, 1.902120010340026, -1.2044618870779888, -0.8552064989038686, -3.051342421579574, -2.041329109054941, -3.341385930324591, -0.003265982713715412, -0.2765831742100038, 0.29458820333277735, 0.5054303447227779, 0.0241283202304483, -0.3258497512296917, 0.7099743220399977, 0.9970841786173534, 0.914703734984379, 0.6816255600734668, 0.2260428428530221, 0.500057391575326, 0.28374448957946485, -1.4617139147677352, -1.1613402552620173, -0.7726258592199208, -0.6003065494701592, -0.15122565860861223, -0.5402081875018947, -0.961310721711611, -0.5574148788661808, -0.5614536976409166, -2.0218068402607323, -1.5117649147958223, 1.3923120284870496, -0.3178994768742099, -0.015943795428636297, -2.77702957714586, -1.8696895010097372, -3.001574767391459, 0.757114030989426, -1.1802829091013183, 0.19118332052195047, 0.4811662543331254, -1.0001778674119826, -1.679664884922508, -0.15181329481022907, 0.8020235061921454, 1.081645968536496, 0.6796132765002796, 0.5570002716523274, 0.18878241164965745, 0.2874009531607539, -0.29156640301011644, 0.3990389709033808, -0.11320047785597544, -0.7481203217652944, -0.14995314276974925, -1.3413491648810107, -2.63490302106274, -0.6640771071101681, -0.5206244498205513, -0.051681123335524166, 0.8235638054964968, 0.6988132243418395, 0.9286615766713907, -1.1507953163435043, -2.458027221287921, -2.68194995217078, -1.1354076513765383, 2.8029231715682115, -0.5162312145662558, -1.2322344614846663, -3.0287459650466024, -2.248721283971213, -1.2830240935233252, 2.1284118716846225, -0.5080925392160287, -0.5594976354926947, -0.01851601541135013, -2.4996336561970876, -0.5553343344053246, 0.7881300222394629, 1.6130648085010075, 0.5600320706937165, 0.41415702218598416, 0.2670033726790107, 1.3841111975418883, -0.16560415373697934, 0.4227316378271269, 0.13552165697197266, -0.26800249982952523, -0.7497800629592842, -0.26237908873891796, -2.777284746894791, -1.5601154280337244, 0.02475361909395848, -0.3032922271551982, 0.11753575687511685, -0.21814924152075327, 0.12956331527608578, -0.049071796281442856, -1.1512842722830263, -1.4362483459063062, -2.489378331855092, -1.055046709748524, 0.10589255246481194, -0.2765862583256202, -0.011745865744917108, -2.530350121186334, -2.583058852750796, -2.01968994297712, 2.0233375421276296, -0.5733097383724265, -0.9237490704155675, -1.915670522998457, -1.7573974910788988, -2.1981296870515674, -0.6965383842044641, 0.024858222105455935, 0.852763515702041, 1.0059462188693173, -0.4802205679630612, 1.0323462742749023, 0.3771372603898896, 0.25007434376698673, 0.6983405922162969, 0.3155596026657519, 0.27725299815953697, -0.015815212529760255, 0.18533426894933708, -1.125248384963072, -1.4442149050647675, -0.5633063735847763, -0.24559755135355613, 0.39016848369891244, -0.35294501630371883, 1.611665229312735, -0.8794787933021544, -1.1194546740381588, -0.8425646327548727, -0.9760518520151925, 1.0542683339702374, 1.7457821265467317, -1.1110752675686064, -0.33597600059520993, 0.20957104583351968, 0.33458934311615784, 1.0602615794622694, 1.721476573665789, -1.1880533873186785, 0.1083429089096336, 0.06757755641740233, 0.5934307528654411, 0.5576953136816392, 1.2049233728995508, -0.4794932443894397, 0.25401994723798565, 0.47792495705873994, 0.7084229312509769, -0.6243431425850955, -2.400266315279791, -0.14598236693525898, 0.05134960877438544, 0.41965306727000146, 0.06481987658830443, -1.283689064404389, -1.7975185417277255, -0.697300554500103, 0.3766218106214334, 0.2374321451026079, 0.05604458443255484, -0.05971592246443997, 0.27972561669851265, -1.6354977265872042, -1.378147099723643, -0.792201090739556, 0.3156186182532638, 0.9458441364508622, 1.2912243028736143, -1.819392828235202, -0.07307401672027898, -0.3827603503524505, 0.4769342951660756, 0.6526546556473778, 1.2260765675135237, -1.3683335911252281, 0.655969955004865, 0.9771951217119794, 1.1124910104765746, 0.355826283327852, 0.6749736657056857, -0.8892252809912398, 0.26910868105785113, 0.4344812805599311, 0.7481289013854171, 0.9833356766707096, -1.3543803272004473, -0.6994113495365291, 0.09540617829214033, 0.4281618046135534, -0.3406118394550196, -0.526214212852472, 0.039472241625652785, -0.6978649786726361, -0.4551164377651691, 0.12969883555686823, 0.5099472604442935, 0.5104261496072897, -0.14887579218048613, 0.08944316526804975, -2.0861191181471788, -0.5842792825257392, 0.32976846791972264, 1.24635125885205, 1.0087891912743885, -0.5445256423362801, -0.5409674470967323, 0.01557107473421844, 0.44928127824505215, 1.000204131058087, 1.752390174445383, -0.015038041715014269, 0.26108028802233096, 0.387028835528808, 1.2071612198219739, 0.12166009229784569, 1.3173059763104435, -0.14861045674872733, 0.18889693044957165, -0.2895611274681493, 0.2932574208075198, -2.5672655388581007, -5.1776544773767705, -0.12135076498911303, 0.15103885615594487, -0.12434948571614393, -1.0066069768151908, -1.4918530950487772, -0.5192216617175968, -1.3170966629283356, 0.06432934271230642, -0.06469795098225217, 0.42850989447956594, 0.40238171057264266, 0.9333303219126978, -1.2374445701250119, -1.3964253778653357, -0.5179852332982848, 0.4917938025678761, 1.5528409746558967, 1.5745007469583296, -0.060633904652256404, -0.004984050294655413, -0.0970568382107288, 0.06633368351583237, 0.7092041843531767, 2.145860334572598, -1.4435351141019108, 0.3821300629801824, 0.1654386935299604, 0.9219144783361809, 0.4427691380266486, 1.4863235757466726, -0.6650275965768134, 0.698663905445123, 0.8688377496663592, 0.9106972145943851, -0.4012798978205137, -1.958166538103227, -0.3136903470059257, 0.10744266229684384, -0.13371129000891235, -0.206398624084405, -1.0036962151947602, -1.171392740671136, -0.3535687378136879, -0.2993297661258976, 0.366319786489902, 0.170594600413887, 0.4178458254212089, 0.4833540275061203, -3.9575433973709684, 0.10784622751461405, -0.40465397381250917, -2.228875617988672, -0.8722176139228413, 3.5351270403197814, 1.639342510310875, 0.3183305557419176, -0.7709489120919099, -1.9373476480230125, -0.9168357084485765, 0.7766581836578972, 1.62555299813979, -2.2260669303379528, -2.259994252958921, -3.0737096998750624, -1.1948296592416623, -0.5717600655724016, -1.0591491682468972, -0.9458874211587276, -1.124903033180018, -2.106751088496988, 0.44741532333480877, 0.21130152381941522, 0.7325263361933695, -1.2419715915239682, 0.06061251610833635, 0.04682682305237842, -0.5432508557259975, 0.4542279604212984, 0.6038307961188177, -3.48475786774094, -0.20556157499032326, 0.31190440667455804, 0.4231659738806714, 0.6085891471479337, -0.08857911097107642, 0.7173728484434896, 0.8323256774097435, -0.6322114030298338, -0.2675359061282906, 0.7727587578231577, 1.3767215490328946, -2.189781049441648, -1.1841494974756734, -2.081912389409818, -0.9865421394234325, -0.14651976512653692, -0.11812746946874764, -2.4314059685356493, -1.3112181409981634, -3.889557931997014, -0.0037371688989194544, 0.44451172911893516, 0.918154417192211, -2.239429584197328, -0.11947668265791629, -1.134666180535936, 0.5631101982806013, -0.18515744313520427, 0.7760494668189625, -1.9863312437729406, 0.12254751272979483, 0.6474533656750464, 0.9042349299389821, 0.6488053505389311, 0.24724583762362978, -4.198326743839313, -2.8400070610700876, -0.7808907963572768, -0.2210573296681819, -0.801626516683356, -2.3201375410468534, -1.0042195783157686, -0.9678944597870215, -0.9173235877778205, -0.22328683008445435, 1.3745602692339007, 1.0881517064709754, 0.410461088411868, -2.9103159566037333, -1.9746072085899788, -0.1900296268586525, 0.3812704012469264, -3.416160728651402, -0.5220413477359719, -2.7973112001192306, -1.6228444065697947, 0.2291410658695943, 0.9301818823378238, -0.5604121778801214, 0.4604139594746863, -0.6294190940706782, -0.9720866242489898, 0.8371983825289442, 0.40706604354817366, -0.08589145802390713, -0.6542521234653045, 0.010511249426628656, 0.538170943984368, 0.6788427321230412, 0.7833236186019965, 0.7034619314873349, -4.639637459095749, -2.146388979562813, -1.6822646781755446, -0.7891213141234882, -1.0515916639423628, -3.4644211103901394, -0.8014006174232757, -0.48850913322801576, -1.4185772903780294, -0.22671253880903927, 2.0014477933412618, 2.6850186216079064, 0.30516811492895124, -1.2800248338831535, -1.7836952699198318, -0.6555416951809093, 0.8112328010664862, 0.8041472110115324, -1.0399193924414236, -1.8234027293771478, -3.2721546376716484, -0.39836931993526564, -0.7470922238318084, -2.441127083346973, -0.379369826600032, -0.8592826754111975, -1.0737123483657298, 0.4925276694589653, 0.5321107958738639, 0.23555161078135023, -0.6701529613008826, 0.3373941968044359, -0.08294643167327993, 0.5918627475859233, 0.9434641561275648, 0.7279255833065655, -2.5801307229417993, -0.45859339104793284, 0.682221858230857, 0.7343662536103995, 0.8569802101256081, -0.9873230964748514, 0.5567923009875126, 0.011287236102722385, -1.7958582631451745, -2.2657364299708145, -3.2363661968694184, -2.8168635991627093, -0.5539724171599649, -0.3318040768663584, 1.0479096797524416, 0.6266318813105392, -0.48601920608983273, -2.0431929483101197, -2.1061998138049782, 1.2199589270215911, 1.1969891897324763, 0.7700272142416381, 0.6868607300529055, -0.30296423655450194, 0.6124672533278297, 0.6758216931617792, 0.45790053104727385, -0.8715036165583406, -1.9291809814861098, -0.7056856793617103, 0.09282477033427346, 1.0188146180840651, -0.07701672702926743, -0.37075552454042904, -1.102606568729091, 0.4995820477040028, 0.27057317026757444, -3.477334933378395, -2.9982391870756078, -1.819321165254912, -1.6036781368799395, -2.6283529459660437, -3.4661745454909214, -0.35580902849599527, 0.169857666271794, -0.37866046607351594, -1.5206665992131212, -1.64862426465457, -2.1239396693882893, 1.024797611731924, 0.8058011438624118, 1.087220054276617, 0.7220824814500062, -0.04191688967883806, -0.7576115233378078, 1.7469689179800447, 0.9787484723117688, 1.0006537316135216, 1.2603000524846513, -1.278005234963984, 0.12079631205589303, 1.1384161540769893, 0.3405672589613089, -0.6295705224488263, -2.102953941758438, -0.1419505854228227, 0.5007937081423274, -0.29842842373052725, -0.8674655945866592, -1.200283392739231, -1.2395530581608707, -1.1654531016240248, -1.0029476722944648, 1.4619298021855498, -0.08306704832992037, -0.5310818604614312, -0.38926952170355356, -0.6437449671844747, -2.3963420881145394, -0.07747630244082757, -0.4882327370576137, -1.0495276677382404, -3.4116936194581524, -3.46017256588237, -3.3524208947865457, 0.718386910922511, 0.815750939111605, 0.6186543251898032, 0.6245648623306616, -0.7555152262963605, -1.289932062775259, 0.6180960928793418, 0.3452754484161111, 1.0581194234511297, 1.4921145847145028, -0.6464654567720904, 0.0050234775446442075, 0.5598962476270868, 0.35523409936261374, -1.1308732220349613, -0.5454532384454224, 0.7491421489394824, 0.48133038795210026, -0.1936409938062544, -0.0380449812989018, -0.3661234573668597, -0.3403279019115425, -0.4666778767268793, -1.6413835814601645, 0.5553017611887814, -0.1638061764219676, -0.7837078114632604, -0.959898362717403, -1.1680413448981788, -1.9963069386736472, 1.2678356016286976, 0.5233793770313725, -1.0627169221358437, -1.3060316890983057, -0.7640091122781834, -2.372895447965668, 0.29514300550868827, 1.2898512320776112, 0.2973213430696261, -0.09277009714687869, -1.0680205018712978, -1.3084054374713554, 1.16839539318436, 1.2417053170841406, 0.9693571358514269, 1.1270800798341452, -0.9909811368760915, 0.0932981381984089, 0.42281450029782275, 0.5233082990800655, -0.7204354393168, -1.8703703816234067, 0.6816979803204201, -0.4889310876313824, -0.02200408014860028, -0.1754922304447153, -0.8215326625101544, -0.5261163224131421, -0.056735953478075765, -0.5327863019871586, -1.29715172275217, -2.326988056342022, -1.3013455656116764, -1.6702576574234596, -2.498310461853618, -2.7917483713484943, 2.2780388611896956, -0.9455245959364643, -1.9061585365387643, -0.828258175368869, -0.7090713603398655, -0.1693857774813821, -1.8388582570103955, -2.5014081307457268, -1.5469250673108401, 0.1660914311236347, 0.46472327513137085, 0.9562546152746868, 0.6133224124118231, -0.7087670836476542, 0.43684200516323096, 0.35291395168981854, -0.14406384593823787, 0.2106863772572188, 1.5232754967998172, -0.47963311215486554, -0.010629792391225891, -0.27171322201979936, -0.21782688676991716, 0.27229616677305585, 1.0810422456868498, -2.1771670897084725, -1.0881353900878465, -0.19033838717584153, 0.7611440279943579, -0.44290889146722495, -2.0660948082100563, -0.8344982501949103, 0.1429552632009319, 0.19512947980122783, 0.006596323780166543, -0.334022206953773, -0.25144749950516193, -2.360943407125278, -3.196872797920852, -0.31048201826112903, 0.294621371396439, 0.4610939807767067, -0.3007493608470466, -1.109834838871048, -0.22282359157002085, -0.45298516431408675, 0.6537047451016638, 0.03153638266104019, 0.8536344583473957, -0.08311799547518003, 0.3083958306735518, 0.7985324132630626, -1.2616932083932026, 1.0351701984602133, 1.2598823764852352, -2.224055175489783, -0.7734945608848635, -0.5505200401147728, 0.16583961307870015, -0.1633061330039054, -2.24077936025445, -1.4079305341837625, -0.21268009577818492, -0.30244796267591734, -0.2399937553191342, -1.172370697498094, -0.25405063165677644, -1.8358576649891085, -0.24726499330710008, 0.27124276350436133, 0.5199889949976951, 0.6736485286073537, -0.6233120072584172, -0.722530102264656, -2.1888728610322588, -0.030571472244218363, 0.29429735651905187, 0.3689301346561315, 0.06118896089792939, -0.5583602237961744, -0.25407064242552047, -0.1734012236347495, 0.40019253494057133, -0.24353897901657817, 0.9110566309312613, 0.23810004296199536, 0.17784561634196985, -0.45931119087627686, -0.6777244009260275, 0.9584546881976033, 0.9193553260071968, -1.2011323743456448, -1.3772911428500816, -1.2569983907366291, 0.7927334998569588, -0.31957903305636004, -1.833882272507613, -0.8858800313900489, 0.07480536268768737, 0.239613123941846, -2.0402390993472523, -2.6780509199876623, -1.1670218294266412, -0.8215593850780313, 0.17175125088549698, 0.07651887650000692, 0.35441763801125803, 0.136586764868521, -0.024362041121299114, -1.0066386958438682, -1.303978733236077, -0.08421042504180754, 0.607267788698162, 0.16322641485345982, -0.4923826528134602, -0.5490790822537173, -0.3904385653818632, -0.08439551970391239, 0.3201071773382375, 0.3942424837213114, 0.7357794760044745, -0.05619365366935942, 0.6153328934272931, 0.7198768472016417, -0.17686385236978083, 0.474663344778344, 1.3052348078309162, -0.6555375649675488, 0.013279232378518116, 0.14757627899690132, 0.0058370601130182526, 0.6130945664064132, 0.1471915430315398, -1.3008702113407504, -0.9257245483623339, -0.1488774852460657, 0.7611963737143744, -1.0122124259030543, -2.2203789945259444, -0.5014340782298111, -0.23370121277210348, 0.5586112163418541, 0.17342686796878426, -0.0803608139642123, -0.4470960040330475, -0.514452044649031, -1.2428685399988333, -1.6698374048377256, -3.1963689784240983, -3.004801939561825, -3.1699779795739773, -2.660411517937777, -2.8802932717287217, -3.6039419677922617, -0.30142019874469134, 0.27228026415367773, 0.19116474166803088, -3.245293059221093, -1.3654851736808558, -0.7802425857743479, 0.281653247194756, 0.2349339986443276, -0.24631626980767624, -0.8505495430350176, -0.12040467607182676, 0.35013931804701287, 0.5837616885638578, 0.5323976462815531, -1.1603383563819651, 0.2570898594597987, -0.32938810905606647, 0.6057796218373167, 0.8489718940552764, -0.5634955848947248, -1.2682699902205996, -2.3177340233714134, -1.366116240281238, -1.3271672505466972, -1.2375647091035324, -1.5183077024995133, -1.607060836391779, -0.37218338300686293, -1.5222503067476938, -1.8753505965523012, -2.262753011797956, -0.597828945633895, -2.2200778499586153, -2.256074347426122, -1.4782589166657556, -1.9617916795768435, 0.20456351600262362, 0.9761940469848268, 0.05002555832674542, -0.7416648740373131, 0.030575350922026515, 0.29267598159656133, 0.40693983285710816, 0.9244703694046285, -1.2112736613501143, -0.056036083682970285, 0.31508092104327096, 0.582045500547745, 0.8529826363080594, 0.2780171492684755, -1.7316489834085171, -2.377777476713417, -1.323604676400631, 0.7758939454697436, 0.4397619869992389, -1.2344787384958, -1.536384151191679, -0.691128396577073, -0.8973983967124426, -0.028827975323782465, -0.43002944555110933, -0.2988611286651258, 0.9059702084125905, 1.8711505463775628, -1.0932528931521097, -2.4174396085071113, -1.8771173176791969, -2.516339933068244, -6.237278195590239, -6.816826635128694, -2.049744936756161, -1.1101453275991915, 0.4233063175141139, 0.690671642008505, 0.09700479572202651, -3.9358828721924826, -0.069882378830458, 0.22016520740522497, 0.8232209897565603, -2.1271153249344863, -2.4597877603573806, -0.8690743597530788, 0.26552070108250503, 0.431074423322014, 0.3000663594747727, -0.6635354354685227, -0.4485478030607437, -2.198777382644756, -0.702655138997241, -0.6746655059439024, -0.05073990194710212, -0.4624181505437924, -1.442434678560702, -1.2571564550340668, -0.7029847741180062, -0.12323268811501195, -0.4244926295791145, -0.22500907718337212, 0.4204527048313343, 0.8754658024887904, -1.3738000703886943, -0.10360033682077958, -1.7747145322962727, -1.277735235659022, -0.8847194882907767, -4.280897583749426, -2.279872208460942, -2.221376860133337, -0.09347321508632501, 0.12524218761156522, 0.08080378406684867, -2.986702150624703, -0.8932889181177802, -0.15738335908707013, 0.5238042792774203, 0.4307949015929339, -0.4771449943011304, -0.9259392486661366, -0.37823438478961063, 0.6894947005597233, 0.8270674975613095, 0.09180277305212121, -0.5256901925719919, -0.840311418075416, -0.5187767492533909, 0.6516311906669381, 0.4616296822947929, -0.4955174097411866, -1.619358615312609, -1.633342635577849, -0.8701725278375938, -1.2800716789415538, -0.8758413618572382, -0.9666991284534578, -0.7799382458051647, 1.1301657992089218, 0.8435800579041892];

    const drawCanvas = document.getElementById("draw");
    const canvas1 = document.getElementById("display1");
    const canvas2 = document.getElementById("display2");
    const canvas3 = document.getElementById("display3");
    const resetButton = document.getElementById("btn-reset");
    const guessDiv = document.getElementById("result-guess");
    const pixelMultiplier = 14;
    [drawCanvas, canvas1, canvas2, canvas3].forEach(canvas => {
        canvas.width = 28 * pixelMultiplier;
        canvas.height = 28 * pixelMultiplier;
    });
    const drawCtx = drawCanvas.getContext("2d");
    resetButton.addEventListener("click", () => {
        [drawCanvas, canvas1, canvas2, canvas3].forEach(canvas => {
            const ctx = canvas.getContext("2d");
            ctx.fillStyle = "#000";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
        });
    });
    drawCtx.fillStyle = "#000";
    drawCtx.fillRect(0, 0, drawCanvas.width, drawCanvas.height);
    let mousedown = false;
    const startDrawing = (x, y) => {
        mousedown = true;
        drawCtx.fillStyle = "#fff";
        drawCtx.strokeStyle = "#fff";
        drawCtx.beginPath();
        drawCtx.moveTo(x, y);
    };
    const keepDrawing = (x, y) => {
        if (mousedown) {
            drawCtx.lineWidth = pixelMultiplier * 3;
            drawCtx.lineCap = "round";
            drawCtx.lineJoin = "round";
            drawCtx.lineTo(x, y);
            drawCtx.stroke();
            drawCtx.moveTo(x, y);
            guessWithCooldown();
        }
    };
    const stopDrawing = () => {
        mousedown = false;
        drawCtx.closePath();
        guess();
    };
    drawCanvas.addEventListener("mousedown", e => startDrawing(e.offsetX, e.offsetY));
    drawCanvas.addEventListener("touchstart", e => { e.preventDefault(); startDrawing(e.touches[0].clientX - drawCanvas.offsetLeft, e.touches[0].clientY - drawCanvas.offsetTop); });
    drawCanvas.addEventListener("mousemove", e => keepDrawing(e.offsetX, e.offsetY));
    drawCanvas.addEventListener("touchmove", e => { e.preventDefault(); keepDrawing(e.touches[0].clientX - drawCanvas.offsetLeft, e.touches[0].clientY - drawCanvas.offsetTop); });
    document.body.addEventListener("mouseup", stopDrawing);
    document.body.addEventListener("touchup", stopDrawing);
    const model = new Sequential(new Conv2d(4, 3, 2, 0), new ReLU(), new Conv2d(4, 3, 2, 0), new ReLU(), new Flatten(), new Linear(144, 10), new Softmax());
    model.loadFromValues(savedModelParams);
    const drawGrayscaleOnCanvas = (canvas, img) => {
        const ctx = canvas.getContext("2d");
        const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const repeat = Math.ceil(canvas.width / img[0].length);
        for (let y = 0; y < img.length; y++) {
            for (let x = 0; x < img[0].length; x++) {
                const val = img[y][x];
                for (let i = 0; i < repeat; i++) {
                    for (let j = 0; j < repeat; j++) {
                        const idx = (y * repeat + j) * canvas.width * 4 + (x * repeat + i) * 4;
                        imgData.data[idx] = val * 255;
                        imgData.data[idx + 1] = val * 255;
                        imgData.data[idx + 2] = val * 255;
                        imgData.data[idx + 3] = 255;
                    }
                }
            }
        }
        ctx.putImageData(imgData, 0, 0);
    };
    const downsizeGrayscale = (img, shape) => {
        const [width, height] = shape;
        const wStep = Math.ceil(img[0].length / width);
        const hStep = Math.ceil(img.length / height);
        return Array.from({ length: height }, (_, y) => Array.from({ length: width }, (_, x) => {
            let sum = 0;
            for (let i = 0; i < wStep; i++) {
                for (let j = 0; j < hStep; j++) {
                    sum += img[y * hStep + j][x * wStep + i];
                }
            }
            return sum / (wStep * hStep);
        }));
    };
    const normalize = (img) => {
        const min = Math.min(...img.map(row => Math.min(...row)));
        const max = Math.max(...img.map(row => Math.max(...row)));
        return img.map(row => row.map(v => (v - min) / (max - min)));
    };
    const withCooldown = (fn, cooldown) => {
        let lastCall = 0;
        return () => {
            const now = Date.now();
            if (now - lastCall > cooldown) {
                lastCall = now;
                fn();
            }
        };
    };
    const guess = () => {
        const imgData = drawCtx.getImageData(0, 0, drawCanvas.width, drawCanvas.height);
        const imgbw = Array.from({ length: drawCanvas.height }, (_, y) => Array.from({ length: drawCanvas.width, }, (_, x) => {
            const i = (y * drawCanvas.width + x) * 4;
            return (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3 / 255;
        }));
        const imgbwDownsized = downsizeGrayscale(imgbw, [28, 28]);
        drawGrayscaleOnCanvas(canvas1, imgbwDownsized);
        let x = [imgbwDownsized.map(row => row.map(v => new Parameter(v)))];
        const canvasses = [canvas2, canvas3];
        for (let i = 0; i < model.layers.length; i++) {
            x = model.layers[i].forward(x);
            if (model.layers[i] instanceof Conv2d) {
                drawGrayscaleOnCanvas(canvasses.shift(), normalize(x[0].map(row => row.map(p => p.getValue()))));
            }
        }
        output(x);
    };
    const guessWithCooldown = withCooldown(guess, 100);
    function output(outputs) {
        const g = outputs.map((p, num) => ({ p, num }));
        g.sort((a, b) => b.p.getValue() - a.p.getValue());
        guessDiv.innerText = `Guesses: \n${g.map(({ p, num }) => `${num}: ${(p.getValue() * 100).toFixed(2)}%`).join("\n")}`;
    }

})();
